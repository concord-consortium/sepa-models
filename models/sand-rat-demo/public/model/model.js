// Generated by CoffeeScript 1.9.1
(function() {
  var Agent, BasicAnimal, Environment, Events, Interactive, Species, ToolButton, Trait, env, helpers, sandratSpecies, startingRats;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  sandratSpecies = require('species/sandrats');

  env = require('environments/field');

  startingRats = 16;

  window.model = {
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }, {
            type: ToolButton.CARRY_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.setupEnvironment();
      return Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          return _this.setupEnvironment();
        };
      })(this));
    },
    setupEnvironment: function() {
      var col, i, j, k, l, ref, results, row;
      for (col = j = 0; j <= 100; col = ++j) {
        for (row = k = 0; k <= 70; row = ++k) {
          this.env.set(col, row, "chow", false);
        }
      }
      results = [];
      for (i = l = 0, ref = startingRats; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        results.push(this.addRat());
      }
      return results;
    },
    addRat: function() {
      var rat;
      rat = sandratSpecies.createAgent();
      rat.setLocation(env.randomLocationWithin(0, 350, 1000, 350, true));
      return this.env.addAgent(rat);
    },
    setNWChow: function(chow) {
      var col, j, results, row;
      results = [];
      for (col = j = 0; j <= 31; col = ++j) {
        results.push((function() {
          var k, results1;
          results1 = [];
          for (row = k = 0; k <= 33; row = ++k) {
            results1.push(this.env.set(col, row, "chow", chow));
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    setNChow: function(chow) {
      var col, j, results, row;
      results = [];
      for (col = j = 33; j <= 64; col = ++j) {
        results.push((function() {
          var k, results1;
          results1 = [];
          for (row = k = 0; k <= 33; row = ++k) {
            results1.push(this.env.set(col, row, "chow", chow));
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    setNEChow: function(chow) {
      var col, j, results, row;
      results = [];
      for (col = j = 66; j <= 100; col = ++j) {
        results.push((function() {
          var k, results1;
          results1 = [];
          for (row = k = 0; k <= 33; row = ++k) {
            results1.push(this.env.set(col, row, "chow", chow));
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    setSChow: function(chow) {
      var col, j, results, row;
      results = [];
      for (col = j = 0; j <= 100; col = ++j) {
        results.push((function() {
          var k, results1;
          results1 = [];
          for (row = k = 36; k <= 75; row = ++k) {
            results1.push(this.env.set(col, row, "chow", chow));
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };

  $(function() {
    helpers.preload([model, env, sandratSpecies], function() {
      return model.run();
    });
    $('#view-prone-check').change(function() {
      return model.showPropensity = $(this).is(':checked');
    });
    $('#chow').change(function() {
      model.setNWChow($(this).is(':checked'));
      model.setNChow($(this).is(':checked'));
      model.setNEChow($(this).is(':checked'));
      return model.setSChow($(this).is(':checked'));
    });
    $('#chow-nw').change(function() {
      return model.setNWChow($(this).is(':checked'));
    });
    $('#chow-n').change(function() {
      return model.setNChow($(this).is(':checked'));
    });
    $('#chow-ne').change(function() {
      return model.setNEChow($(this).is(':checked'));
    });
    return $('#chow-s').change(function() {
      return model.setSChow($(this).is(':checked'));
    });
  });

}).call(this);
