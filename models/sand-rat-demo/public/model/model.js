// Generated by CoffeeScript 1.9.1
(function() {
  var Agent, BasicAnimal, Chart, Environment, Events, Interactive, Species, ToolButton, Trait, chowSpecies, env, helpers, sandratSpecies, startingRats;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  Chart = require('model/chart');

  sandratSpecies = require('species/sandrats');

  chowSpecies = require('species/chow');

  env = require('environments/field');

  startingRats = 20;

  window.model = {
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }, {
            type: ToolButton.CARRY_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.locations = {
        all: {
          x: 0,
          y: 0,
          width: this.env.width,
          height: this.env.height
        },
        s: {
          x: 0,
          y: Math.round(this.env.height / 2),
          width: this.env.width,
          height: Math.round(this.env.height / 2)
        },
        nw: {
          x: 0,
          y: 0,
          width: Math.round(this.env.width / 2),
          height: Math.round(this.env.height / 2)
        },
        ne: {
          x: Math.round(this.env.width / 2),
          y: 0,
          width: Math.round(this.env.width / 2),
          height: Math.round(this.env.height / 2)
        }
      };
      this.setupEnvironment();
      this.isSetUp = true;
      this.stopDate = 0;
      this.secondsPerSample = 2;
      this.graphInterval = Math.ceil(this.targetFPS() * this.secondsPerSample);
      Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          _this.setupEnvironment();
          return $('.time-limit-dialog').fadeOut(300);
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          _this.countRatsInAreas();
          if (_this.env.date % _this.graphInterval === 1) {
            drawCharts();
          }
          if (_this.stopDate > 0 && _this.env.date > _this.stopDate) {
            _this.env.stop();
            drawCharts();
            return _this._timesUp();
          }
        };
      })(this));
    },
    targetFPS: function() {
      return 1000 / (this.env != null ? this.env._runLoopDelay : Environment.DEFAULT_RUN_LOOP_DELAY);
    },
    agentsOfSpecies: function(species) {
      var a, j, len, ref, set;
      set = [];
      ref = this.env.agents;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        if (a.species === species) {
          set.push(a);
        }
      }
      return set;
    },
    _countRats: function(rectangle) {
      var a, data, j, len, rats;
      data = {};
      rats = (function() {
        var j, len, ref, results;
        ref = this.env.agentsWithin(rectangle);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          a = ref[j];
          if (a.species === sandratSpecies) {
            results.push(a);
          }
        }
        return results;
      }).call(this);
      data = {
        date: Math.floor(this.env.date / this.graphInterval) * this.secondsPerSample,
        total: rats.length,
        healthy: 0,
        diabetic: 0
      };
      for (j = 0, len = rats.length; j < len; j++) {
        a = rats[j];
        if (!a.get('has diabetes')) {
          data.healthy++;
        }
        if (a.get('has diabetes')) {
          data.diabetic++;
        }
      }
      return data;
    },
    countRatsInAreas: function() {
      if (this.isFieldModel) {
        return this.current_counts.all = this._countRats(this.locations.all);
      } else {
        this.current_counts.s = this._countRats(this.locations.s);
        this.current_counts.ne = this._countRats(this.locations.ne);
        return this.current_counts.nw = this._countRats(this.locations.nw);
      }
    },
    setupEnvironment: function() {
      var col, i, j, k, l, ref, ref1, ref2, row;
      for (col = j = 0, ref = this.env.columns; 0 <= ref ? j <= ref : j >= ref; col = 0 <= ref ? ++j : --j) {
        for (row = k = 0, ref1 = this.env.rows; 0 <= ref1 ? k <= ref1 : k >= ref1; row = 0 <= ref1 ? ++k : --k) {
          this.env.set(col, row, "chow", false);
        }
      }
      for (i = l = 0, ref2 = startingRats; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
        this.addRat();
      }
      $('#chow, #chow-s, #chow-nw, #chow-ne').attr('checked', false);
      this.current_counts = {
        all: {
          total: 0
        },
        s: {
          total: 0
        },
        nw: {
          total: 0
        },
        ne: {
          total: 0
        }
      };
      return resetAndDrawCharts();
    },
    addRat: function() {
      var loc, rat;
      loc = this.isFieldModel ? this.locations.all : this.locations.s;
      rat = sandratSpecies.createAgent();
      rat.set('age', 20 + (Math.floor(Math.random() * 40)));
      rat.setLocation(env.randomLocationWithin(loc.x, loc.y, loc.width, loc.height, true));
      return this.env.addAgent(rat);
    },
    addChow: function(n, loc) {
      var chow, i, j, ref, results;
      results = [];
      for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        chow = chowSpecies.createAgent();
        chow.setLocation(env.randomLocationWithin(loc.x, loc.y, loc.width, loc.height, true));
        results.push(this.env.addAgent(chow));
      }
      return results;
    },
    removeChow: function(loc) {
      var agent, agents, j, len;
      agents = env.agentsWithin(loc);
      for (j = 0, len = agents.length; j < len; j++) {
        agent = agents[j];
        if (agent.species.speciesName === "chow") {
          agent.die();
        }
      }
      return this.env.removeDeadAgents();
    },
    setChow: function(area, chow) {
      var amount, col, j, k, loc, ref, ref1, ref2, ref3, ref4, ref5, row;
      loc = this.locations[area];
      if (loc == null) {
        return;
      }
      for (col = j = ref = loc.x, ref1 = loc.x + loc.width, ref2 = this.env._columnWidth; ref2 > 0 ? j <= ref1 : j >= ref1; col = j += ref2) {
        for (row = k = ref3 = loc.y, ref4 = loc.y + loc.height, ref5 = this.env._rowHeight; ref5 > 0 ? k <= ref4 : k >= ref4; row = k += ref5) {
          this.env.setAt(col, row, "chow", chow);
        }
      }
      if (chow) {
        amount = Math.round(loc.width * loc.height / 7000);
        return this.addChow(amount, loc);
      } else {
        return this.removeChow(loc);
      }
    },
    setStopDate: function(date) {
      return this.stopDate = date;
    },
    _timesUp: function() {
      return $('.time-limit-dialog').fadeIn(300);
    }
  };

  $(function() {
    var chart1, chart1PeriodId, chart2, chart2PeriodId, graph1Location;
    chart1 = null;
    chart2 = null;
    model.isFieldModel = !/[^\/]*html/.exec(document.location.href) || /[^\/]*html/.exec(document.location.href)[0] === "field.html";
    model.isLifespanModel = /[^\/]*html/.exec(document.location.href) && /[^\/]*html/.exec(document.location.href)[0] === "lifespan.html";
    graph1Location = model.isFieldModel ? 'all' : 'ne';
    if (model.isLifespanModel) {
      startingRats = 10;
    }
    helpers.preload([model, env, sandratSpecies], function() {
      model.run();
      if ($('#field-chart').length > 0) {
        chart1 = new Chart(model, 'field-chart', 'diabetic', graph1Location);
      }
      if ($('#field-chart-2').length > 0) {
        return chart2 = new Chart(model, 'field-chart-2', 'diabetic', 'nw');
      }
    });
    $('#view-sex-check').change(function() {
      return model.showSex = $(this).is(':checked');
    });
    $('#view-prone-check').change(function() {
      return model.showPropensity = $(this).is(':checked');
    });
    $('#view-diabetic-check').change(function() {
      return model.showDiabetic = $(this).is(':checked');
    });
    chart1PeriodId = null;
    chart2PeriodId = null;
    $('#chow').change(function() {
      model.setChow('all', $(this).is(':checked'));
      if ($(this).is(':checked')) {
        chart1PeriodId = 'chow-' + Date.now();
        return chart1 != null ? chart1.startPeriod(chart1PeriodId) : void 0;
      } else {
        return chart1 != null ? chart1.endPeriod(chart1PeriodId) : void 0;
      }
    });
    $('#chow-nw').change(function() {
      model.setChow('nw', $(this).is(':checked'));
      if ($(this).is(':checked')) {
        chart2PeriodId = 'chow-' + Date.now();
        return chart2 != null ? chart2.startPeriod(chart2PeriodId) : void 0;
      } else {
        return chart2 != null ? chart2.endPeriod(chart2PeriodId) : void 0;
      }
    });
    $('#chow-ne').change(function() {
      model.setChow('ne', $(this).is(':checked'));
      if ($(this).is(':checked')) {
        chart1PeriodId = 'chow-' + Date.now();
        return chart1 != null ? chart1.startPeriod(chart1PeriodId) : void 0;
      } else {
        return chart1 != null ? chart1.endPeriod(chart1PeriodId) : void 0;
      }
    });
    $('#chow-s').change(function() {
      return model.setChow('s', $(this).is(':checked'));
    });
    $('#time-limit').change(function() {
      model.setStopDate($(this).val() * model.targetFPS());
      if (chart1 != null) {
        chart1.recalculateLength();
      }
      return chart2 != null ? chart2.recalculateLength() : void 0;
    });
    window.resetAndDrawCharts = function() {
      if (chart1 != null) {
        chart1.reset();
      }
      if (chart2 != null) {
        chart2.reset();
      }
      return drawCharts();
    };
    return window.drawCharts = function() {
      if (chart1 != null) {
        chart1.draw();
      }
      return chart2 != null ? chart2.draw() : void 0;
    };
  });

}).call(this);
