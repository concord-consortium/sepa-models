// Generated by CoffeeScript 1.9.1
(function() {
  var Agent, BasicAnimal, Environment, Events, Interactive, Species, ToolButton, Trait, chowSpecies, drawChart, env, helpers, sandratSpecies, startingRats;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  sandratSpecies = require('species/sandrats');

  chowSpecies = require('species/chow');

  env = require('environments/field');

  startingRats = 16;

  window.model = {
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }, {
            type: ToolButton.CARRY_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.setupEnvironment();
      this.isSetUp = true;
      Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          return _this.setupEnvironment();
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          return drawChart(_this.countRats());
        };
      })(this));
    },
    agentsOfSpecies: function(species) {
      var a, j, len, ref, set;
      set = [];
      ref = this.env.agents;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        if (a.species === species) {
          set.push(a);
        }
      }
      return set;
    },
    countRats: function() {
      var a, diabeticRats, healthyRats, j, len, ref;
      healthyRats = 0;
      diabeticRats = 0;
      ref = this.agentsOfSpecies(sandratSpecies);
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        if (!a.get('has diabetes')) {
          healthyRats++;
        }
        if (a.get('has diabetes')) {
          diabeticRats++;
        }
      }
      console.log([healthyRats, diabeticRats]);
      return [healthyRats, diabeticRats];
    },
    setupEnvironment: function() {
      var col, i, j, k, l, ref, results, row;
      for (col = j = 0; j <= 100; col = ++j) {
        for (row = k = 0; k <= 70; row = ++k) {
          this.env.set(col, row, "chow", false);
        }
      }
      results = [];
      for (i = l = 0, ref = startingRats; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        results.push(this.addRat());
      }
      return results;
    },
    addRat: function() {
      var rat, top;
      top = this.isFieldModel ? 0 : 350;
      rat = sandratSpecies.createAgent();
      rat.setLocation(env.randomLocationWithin(0, top, 1000, 700, true));
      return this.env.addAgent(rat);
    },
    addChow: function(n, x, y, w, h) {
      var chow, i, j, ref, results;
      results = [];
      for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        chow = chowSpecies.createAgent();
        chow.setLocation(env.randomLocationWithin(x, y, w, h, true));
        results.push(this.env.addAgent(chow));
      }
      return results;
    },
    removeChow: function(x, y, width, height) {
      var agent, agents, j, len, results;
      agents = env.agentsWithin({
        x: x,
        y: y,
        width: width,
        height: height
      });
      results = [];
      for (j = 0, len = agents.length; j < len; j++) {
        agent = agents[j];
        if (agent.species.speciesName === "chow") {
          results.push(agent.die());
        }
      }
      return results;
    },
    setNWChow: function(chow) {
      var col, j, k, row;
      for (col = j = 0; j <= 31; col = ++j) {
        for (row = k = 0; k <= 33; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(25, 0, 0, 330, 350);
      } else {
        return this.removeChow(0, 0, 330, 350);
      }
    },
    setNChow: function(chow) {
      var col, j, k, row;
      for (col = j = 33; j <= 64; col = ++j) {
        for (row = k = 0; k <= 33; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(25, 340, 0, 330, 350);
      } else {
        return this.removeChow(340, 0, 330, 350);
      }
    },
    setNEChow: function(chow) {
      var col, j, k, row;
      for (col = j = 66; j <= 100; col = ++j) {
        for (row = k = 0; k <= 33; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(25, 670, 0, 330, 350);
      } else {
        return this.removeChow(670, 0, 330, 350);
      }
    },
    setSChow: function(chow) {
      var col, j, k, row;
      for (col = j = 0; j <= 100; col = ++j) {
        for (row = k = 36; k <= 75; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(70, 0, 350, 1000, 350);
      } else {
        return this.removeChow(0, 350, 1000, 350);
      }
    }
  };

  $(function() {
    model.isFieldModel = /[^\/]*html/.exec(document.location.href)[0] === "field.html";
    helpers.preload([model, env, sandratSpecies], function() {
      return model.run();
    });
    $('#view-prone-check').change(function() {
      return model.showPropensity = $(this).is(':checked');
    });
    $('#chow').change(function() {
      model.setNWChow($(this).is(':checked'));
      model.setNChow($(this).is(':checked'));
      model.setNEChow($(this).is(':checked'));
      return model.setSChow($(this).is(':checked'));
    });
    $('#chow-nw').change(function() {
      return model.setNWChow($(this).is(':checked'));
    });
    $('#chow-n').change(function() {
      return model.setNChow($(this).is(':checked'));
    });
    $('#chow-ne').change(function() {
      return model.setNEChow($(this).is(':checked'));
    });
    return $('#chow-s').change(function() {
      return model.setSChow($(this).is(':checked'));
    });
  });

  drawChart = function(_data) {
    var chart, data, options, view;
    if (_data == null) {
      _data = [0, 0];
    }
    if (model.isSetUp) {
      _data = model.countRats();
    }
    data = google.visualization.arrayToDataTable([
      [
        "Type", "Number of organisms", {
          role: "style"
        }
      ], ["Healthy", _data[0], "silver"], ["Diabetic", _data[1], "brown"]
    ]);
    view = new google.visualization.DataView(data);
    view.setColumns([
      0, 1, {
        calc: "stringify",
        sourceColumn: 1,
        type: "string",
        role: "annotation"
      }, 2
    ]);
    options = {
      title: "Sandrats in population",
      width: 300,
      height: 300,
      bar: {
        groupWidth: "95%"
      },
      legend: {
        position: "none"
      }
    };
    chart = new google.visualization.ColumnChart(document.getElementById("field-chart"));
    return chart.draw(view, options);
  };

  google.load('visualization', '1', {
    packages: ['corechart', 'bar'],
    callback: drawChart
  });

}).call(this);
