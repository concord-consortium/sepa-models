// Generated by CoffeeScript 1.9.1
(function() {
  require.register("model/chart", function(exports, require, module) {
    var Chart;
    Chart = Chart = (function() {
      var drawChart;

      function Chart(model1, parent, type, location) {
        this.model = model1;
        this.parent = parent;
        this.type = type;
        this.location = location;
        this._rectangles = {
          all: {
            x: 0,
            y: 0,
            width: 600,
            height: 700
          },
          s: {
            x: 0,
            y: 350,
            width: 1000,
            height: 350
          },
          nw: {
            x: 0,
            y: 0,
            width: 500,
            height: 350
          },
          ne: {
            x: 500,
            y: 0,
            width: 500,
            height: 350
          }
        };
        this._data = {
          all: [],
          s: [],
          nw: [],
          ne: []
        };
        this.setupChart();
        this.reset();
        return;
      }

      Chart.prototype.draw = function() {
        var j, len, loc, newData, ref;
        if (!this.model.isSetUp) {
          return;
        }
        if (this._data.length === 0 || this._data[this.location][this._data[this.location].length - 1].date < model.env.date) {
          ref = ['all', 's', 'nw', 'ne'];
          for (j = 0, len = ref.length; j < len; j++) {
            loc = ref[j];
            newData = this.model.countRats(this._rectangles[loc]);
            this._data[loc].push(newData);
          }
          this.chart.validateData();
          this.chart.zoomToIndexes(this._data[this.location].length - 11, this._data[this.location].length - 1);
        }
      };

      Chart.prototype.reset = function() {
        var i, j, k, len, loc, ref;
        ref = ['all', 's', 'nw', 'ne'];
        for (j = 0, len = ref.length; j < len; j++) {
          loc = ref[j];
          this._data[loc].length = 0;
          for (i = k = -10; k <= 0; i = k += 1) {
            this._data[loc].push({
              date: i
            });
          }
        }
        this.chart.validateData();
        return this.chart.zoomToIndexes(0, 9);
      };

      Chart.prototype.setType = function(type) {
        this.type = type;
      };

      Chart.prototype.setLocation = function(location) {
        this.location = location;
        this.chart.dataProvider = this._data[this.location];
        this.chart.validateData();
        return this.chart.zoomToIndexes(this._data[this.location].length - 11, this._data[this.location].length - 1);
      };

      Chart.prototype.setupChart = function() {
        return this.chart = AmCharts.makeChart(this.parent, {
          type: 'serial',
          theme: 'light',
          marginTop: 10,
          marginRight: 0,
          marginLeft: 0,
          marginBottom: 0,
          dataProvider: this._data[this.location],
          categoryField: 'date',
          categoryAxis: {
            dashLength: 1,
            minorGridEnabled: true
          },
          legend: {
            useGraphSettings: true,
            autoMargins: false,
            marginLeft: 40,
            marginRight: 0,
            fontSize: 10,
            markerSize: 12,
            position: 'bottom',
            verticalGap: 5,
            markerLabelGap: 5,
            maxColumns: 3,
            switchType: 'v'
          },
          graphs: [
            {
              id: 'diabetic-rats-line',
              lineColor: '#ff0000',
              lineThickness: 2,
              type: 'smoothedLine',
              valueField: 'diabetic',
              valueAxis: 'diabetic',
              title: 'Line'
            }, {
              id: 'diabetic-rats-dots',
              bullet: 'round',
              bulletSize: 4,
              lineColor: '#ff0000',
              lineThickness: 0,
              type: 'smoothedLine',
              valueField: 'diabetic',
              valueAxis: 'diabetic',
              title: 'Points'
            }, {
              id: 'all-rats-bar',
              type: 'column',
              lineColor: '#6666ff',
              lineAlpha: 0.6,
              fillColors: '#6666ff',
              fillAlphas: 0.6,
              columnWidth: 1,
              clustered: false,
              valueField: 'total',
              valueAxis: 'diabetic',
              title: 'Total Rats'
            }, {
              id: 'diabetic-rats-bar',
              type: 'column',
              lineColor: '#990000',
              fillColors: '#990000',
              fillAlphas: 0.6,
              columnWidth: 0.6,
              clustered: false,
              valueField: 'diabetic',
              valueAxis: 'diabetic',
              title: 'Diabetic Rats'
            }
          ],
          chartScrollbar: {
            graph: 'diabetic-rats-bar',
            backgroundColor: '#444444',
            color: '#000000',
            resizeEnabled: false,
            scrollbarHeight: 15
          },
          zoomOutButton: {
            display: 'none'
          },
          valueAxes: [
            {
              id: 'diabetic',
              title: 'Diabetic Rats',
              autoGridCount: false,
              gridCount: 5,
              minimum: 0,
              maximum: 60,
              position: 'left'
            }
          ]
        });
      };

      drawChart = function(chartN) {
        var chart, chartData, data, id, key, max, options, transformedData, view;
        max = graphLoc === "all" ? 60 : graphLoc === "s" ? 40 : 30;
        options = {
          title: "Sandrats in population",
          width: 300,
          height: 260,
          bar: {
            groupWidth: "95%"
          },
          legend: {
            position: "none"
          },
          vAxis: {
            viewWindowMode: 'explicit',
            viewWindow: {
              max: max,
              min: 0
            }
          }
        };
        if (graphType === "diabetic") {
          data = google.visualization.arrayToDataTable([
            [
              "Type", "Number of rats", {
                role: "style"
              }
            ], ["Non-diabetic", _data.healthy, "silver"], ["Diabetic", _data.diabetic, "brown"]
          ]);
          view = new google.visualization.DataView(data);
          view.setColumns([
            0, 1, {
              calc: "stringify",
              sourceColumn: 1,
              type: "string",
              role: "annotation"
            }, 2
          ]);
        } else if (graphType === "weight") {
          transformedData = {
            "< 150": {
              count: (_data[130] || 0) + (_data[140] || 0),
              color: "blue"
            },
            "150-159": {
              count: _data[150] || 0,
              color: "blue"
            },
            "160-169": {
              count: _data[160] || 0,
              color: "blue"
            },
            "170-179": {
              count: _data[170] || 0,
              color: "#df7c00"
            },
            "180-189": {
              count: _data[180] || 0,
              color: "#df7c00"
            },
            "> 190": {
              count: (_data[190] || 0) + (_data[200] || 0) + (_data[210] || 0) + (_data[220] || 0) + (_data[230] || 0),
              color: "#df7c00"
            }
          };
          chartData = [
            [
              "Type", "Number of rats", {
                role: "style"
              }
            ]
          ];
          for (key in transformedData) {
            chartData.push([key, transformedData[key].count, transformedData[key].color]);
          }
          data = google.visualization.arrayToDataTable(chartData);
          view = new google.visualization.DataView(data);
          view.setColumns([
            0, 1, {
              calc: "stringify",
              sourceColumn: 1,
              type: "string",
              role: "annotation"
            }, 2
          ]);
          options.title = "Weight of sandrats (g)";
        }
        id = chartN === 1 ? "field-chart" : "field-chart-2";
        chart = new google.visualization.ColumnChart(document.getElementById(id));
        return chart.draw(view, options);
      };

      return Chart;

    })();
    return module.exports = Chart;
  });

}).call(this);
