// Generated by CoffeeScript 1.9.1
(function() {
  var hasProp = {}.hasOwnProperty;

  require.register("model/chart", function(exports, require, module) {
    var Chart;
    Chart = Chart = (function() {
      function Chart(model1, parent, type, location) {
        this.model = model1;
        this.parent = parent;
        this.type = type;
        this.location = location;
        this._guides = {};
        this._data = [];
        this.reset();
        this.setupChart();
        return;
      }

      Chart.prototype.draw = function() {
        var currentDate, newData, old, ref, ref1;
        if (!this.model.isSetUp) {
          return;
        }
        if ((this._idx === this._data.length && ((ref = this._data[this._idx - 1]) != null ? ref.date : void 0) < model.env.date) || (this._idx < this._data.length && ((ref1 = this._data[this._idx]) != null ? ref1.date : void 0) < model.env.date)) {
          newData = this.model.current_counts[this.location];
          currentDate = newData.date;
          newData.color = 'hsl(0,100%,55%)';
          newData.base = -2;
          if (this._idx > 0) {
            this._data[this._idx - 1].color = 'hsl(0,100%,92%)';
          }
          if (this._idx === this._data.length) {
            old = this._data.shift();
            this._data.push(newData);
          } else {
            this._data[this._idx] = newData;
            this._idx++;
          }
          this._extendOpenPeriods(currentDate);
          this.chart.validateData();
        }
      };

      Chart.prototype.reset = function() {
        var guide, i, j, k, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
        this.recalculateLength();
        for (i = j = 0, ref = this._data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          this._data[i] = {
            date: 2 * i,
            placeholder: true
          };
        }
        if (this.chart != null) {
          ref1 = this.chart.categoryAxis.guides;
          for (k = ref1.length - 1; k >= 0; k += -1) {
            guide = ref1[k];
            this.chart.categoryAxis.removeGuide(guide);
          }
        }
        this._guides = {};
        this._idx = 0;
        if (((ref2 = window.CONFIG.chart) != null ? ref2.barWidth : void 0) != null) {
          if ((ref3 = this.chart) != null) {
            ref3.graphs[0].columnWidth = window.CONFIG.chart.barWidth;
          }
        }
        if (((ref4 = window.CONFIG.chart) != null ? ref4.connectingLine : void 0) != null) {
          if (window.CONFIG.chart.connectingLine) {
            if ((ref5 = this.chart) != null) {
              ref5.showGraph(this.chart.graphs[1]);
            }
          } else {
            if ((ref6 = this.chart) != null) {
              ref6.hideGraph(this.chart.graphs[1]);
            }
          }
        }
        if ((ref7 = this.chart) != null) {
          ref7.validateData();
        }
      };

      Chart.prototype.recalculateLength = function() {
        var newLength, nextDate, ref, ref1;
        if ((((ref = window.CONFIG.chart) != null ? ref.bars : void 0) != null) && window.CONFIG.chart.bars !== 0) {
          newLength = window.CONFIG.chart.bars;
        } else if (this.model.stopDate === 0) {
          newLength = 30;
        } else {
          newLength = Math.ceil(this.model.stopDate / this.model.graphInterval) + 1;
        }
        while (this._data.length > newLength) {
          if (this._data[this._data.length - 1].placeholder) {
            this._data.pop();
          } else {
            this._data.shift();
          }
        }
        while (this._data.length < newLength) {
          nextDate = this._data.length === 0 ? 0 : this._data[this._data.length - 1].date + 2;
          this._data.push({
            date: nextDate,
            placeholder: true
          });
        }
        if ((ref1 = this.chart) != null) {
          ref1.validateData();
        }
      };

      Chart.prototype.startPeriod = function(id) {
        var currentDate, guide, ref;
        currentDate = this._idx === 0 ? 0 : this._data[this._idx - 1].date;
        guide = new AmCharts.Guide;
        guide.color = '#999999';
        guide.fillColor = 'hsl(200, 100%, 92%)';
        guide.fillAlpha = 0.4;
        guide.category = '' + currentDate;
        guide.toCategory = '' + currentDate;
        guide.expand = true;
        guide.label = 'Sugary chow added';
        guide.position = 'left';
        guide.inside = true;
        guide.labelRotation = 90;
        this._guides[id] = guide;
        if ((ref = this.chart) != null) {
          ref.categoryAxis.addGuide(guide);
        }
      };

      Chart.prototype.endPeriod = function(id) {
        delete this._guides[id];
      };

      Chart.prototype._extendOpenPeriods = function(date) {
        var guide, id, ref;
        ref = this._guides;
        for (id in ref) {
          if (!hasProp.call(ref, id)) continue;
          guide = ref[id];
          guide.toCategory = '' + date;
        }
      };

      Chart.prototype.setupChart = function() {
        var ref, ref1;
        this.chart = AmCharts.makeChart(this.parent, {
          type: 'serial',
          theme: 'light',
          marginTop: 10,
          marginRight: 0,
          marginLeft: 0,
          marginBottom: 0,
          dataProvider: this._data,
          categoryField: 'date',
          categoryAxis: {
            dashLength: 1,
            minorGridEnabled: true
          },
          graphs: [
            {
              id: 'diabetic-rats-bar',
              type: 'column',
              lineColorField: 'color',
              fillColorsField: 'color',
              colorField: 'color',
              fillAlphas: 0.6,
              columnWidth: (((ref = window.CONFIG.chart) != null ? ref.barWidth : void 0) != null ? window.CONFIG.chart.barWidth : 1),
              clustered: false,
              valueField: 'diabetic',
              valueAxis: 'diabetic',
              openField: 'base',
              title: 'Diabetic Rats',
              visibleInLegend: false
            }, {
              id: 'diabetic-rats-line',
              lineColor: '#ff0000',
              lineThickness: 2,
              type: 'smoothedLine',
              valueField: 'diabetic',
              valueAxis: 'diabetic',
              title: 'Line',
              hidden: (((ref1 = window.CONFIG.chart) != null ? ref1.connectingLine : void 0) != null ? !window.CONFIG.chart.connectingLine : true)
            }
          ],
          valueAxes: [
            {
              id: 'diabetic',
              title: 'Diabetic Rats',
              autoGridCount: false,
              gridCount: 6,
              showFirstLabel: false,
              strictMinMax: true,
              minimum: -2,
              maximum: this.location === 'all' ? 50 : 30,
              position: 'left'
            }
          ]
        });
      };

      return Chart;

    })();
    return module.exports = Chart;
  });

}).call(this);
