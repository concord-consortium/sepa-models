// Generated by CoffeeScript 1.9.1
(function() {
  var helpers,
    hasProp = {}.hasOwnProperty;

  helpers = require('helpers');

  require.register("model/chart", function(exports, require, module) {
    var Chart;
    Chart = Chart = (function() {
      function Chart(model, parent, location) {
        this.model = model;
        this.parent = parent;
        this.location = location;
        this._guides = {};
        this._data = [];
        this._timeBased = false;
        this._timeProp = null;
        this._time = 0;
      }

      Chart.prototype.setData = function(properties) {
        var i, j, k, len, prop, ref, results, results1;
        this.properties = properties;
        this._data = [];
        if (this.properties.length === 1 && this.properties[0].timeBased) {
          this._timeBased = true;
          this._timeProp = this.properties[0];
          results = [];
          for (i = j = 1; j <= 30; i = ++j) {
            results.push(this._data.push({
              category: i,
              description: this._timeProp.description
            }));
          }
          return results;
        } else {
          this._timeBased = false;
          ref = this.properties;
          results1 = [];
          for (k = 0, len = ref.length; k < len; k++) {
            prop = ref[k];
            results1.push(this._data.push({
              category: prop.title,
              description: prop.description,
              count: 0,
              property: prop.property
            }));
          }
          return results1;
        }
      };

      Chart.prototype.reset = function() {
        this.setData(this.properties);
        this.parent.innerHTML = "";
        this._time = 0;
        this._drawChart();
        return this.update();
      };

      Chart.prototype.update = function() {
        var column, datum, j, len, newData, ref, ref1, ref2, timeChartTime;
        if (!this.model.isSetUp) {
          return;
        }
        newData = this.model.current_counts[this.location];
        if (!this._timeBased) {
          ref = this._data;
          for (j = 0, len = ref.length; j < len; j++) {
            column = ref[j];
            column.count = newData[column.property];
          }
        } else {
          this._time++;
          if (this._time % 2 !== 0) {
            return;
          }
          timeChartTime = this._time / 2;
          datum = helpers.clone(this._data[0]);
          datum.category = timeChartTime;
          datum.count = newData[this._timeProp.property];
          datum.base = -2;
          datum.color = 'hsl(0,100%,55%)';
          if (timeChartTime <= this._data.length) {
            this._data[timeChartTime - 1] = datum;
            if ((ref1 = this._data[timeChartTime - 2]) != null) {
              ref1.color = 'hsl(0,100%,85%)';
            }
          } else {
            this._data.shift();
            this._data.push(datum);
            if ((ref2 = this._data[this._data.length - 2]) != null) {
              ref2.color = 'hsl(0,100%,85%)';
            }
          }
          this._extendOpenPeriods();
        }
        return this.chart.validateData();
      };

      Chart.prototype._drawChart = function() {
        var opts;
        opts = helpers.clone(this._defaultChartProps);
        if (this._timeBased) {
          opts.valueAxes[0].title = this._timeProp.yAxis;
          opts.valueAxes[0].minimum = -2;
        }
        opts.dataProvider = this._data;
        return this.chart = AmCharts.makeChart(this.parent, opts);
      };

      Chart.prototype._defaultChartProps = {
        type: 'serial',
        theme: 'light',
        marginTop: 10,
        marginRight: 0,
        marginLeft: 0,
        marginBottom: 0,
        categoryAxis: {
          dashLength: 1,
          minorGridEnabled: true
        },
        valueAxes: [
          {
            title: 'Number of Rats',
            autoGridCount: false,
            gridCount: 6,
            showFirstLabel: false,
            strictMinMax: true,
            minimum: 0,
            maximum: Chart.location === 'all' ? 50 : 30,
            position: 'left'
          }
        ],
        categoryField: 'category',
        graphs: [
          {
            balloonText: "<b>[[value]]</b> [[description]]",
            fillAlphas: 0.8,
            lineAlpha: 0.2,
            type: "column",
            valueField: "count",
            openField: "base",
            lineColorField: 'color',
            fillColorsField: 'color',
            colorField: 'color'
          }
        ]
      };

      Chart.prototype.startPeriod = function(id) {
        var guide, ref;
        if (!this._timeBased) {
          return;
        }
        guide = new AmCharts.Guide;
        guide.color = '#999999';
        guide.fillColor = 'hsl(200, 100%, 92%)';
        guide.fillAlpha = 0.4;
        guide.category = '' + Math.ceil(this._time / 2);
        guide.toCategory = '' + Math.ceil(this._time / 2);
        guide.expand = true;
        guide.label = 'Sugary food added';
        guide.position = 'left';
        guide.inside = true;
        guide.labelRotation = 90;
        this._guides[id] = guide;
        return (ref = this.chart) != null ? ref.categoryAxis.addGuide(guide) : void 0;
      };

      Chart.prototype.endPeriod = function(id) {
        return delete this._guides[id];
      };

      Chart.prototype._extendOpenPeriods = function() {
        var guide, id, ref;
        ref = this._guides;
        for (id in ref) {
          if (!hasProp.call(ref, id)) continue;
          guide = ref[id];
          guide.toCategory = '' + Math.ceil(this._time / 2);
        }
      };

      return Chart;

    })();
    return module.exports = Chart;
  });

}).call(this);
