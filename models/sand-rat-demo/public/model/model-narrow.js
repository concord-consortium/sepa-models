// Generated by CoffeeScript 1.9.1
(function() {
  var Agent, BasicAnimal, Chart, Environment, Events, Interactive, Species, ToolButton, Trait, chowSpecies, env, helpers, sandratSpecies, startingRats;

  helpers = require('helpers');

  Environment = require('models/environment');

  Species = require('models/species');

  Agent = require('models/agent');

  Trait = require('models/trait');

  Interactive = require('ui/interactive');

  Events = require('events');

  ToolButton = require('ui/tool-button');

  BasicAnimal = require('models/agents/basic-animal');

  Chart = require('model/chart');

  sandratSpecies = require('species/sandrats');

  chowSpecies = require('species/chow');

  env = require('environments/field');

  startingRats = 20;

  window.model = {
    run: function() {
      this.interactive = new Interactive({
        environment: env,
        toolButtons: [
          {
            type: ToolButton.INFO_TOOL
          }, {
            type: ToolButton.CARRY_TOOL
          }
        ]
      });
      document.getElementById('environment').appendChild(this.interactive.getEnvironmentPane());
      this.env = env;
      this.setupEnvironment();
      this.isSetUp = true;
      this.stopDate = 0;
      Events.addEventListener(Environment.EVENTS.RESET, (function(_this) {
        return function() {
          _this.setupEnvironment();
          return $('.time-limit-dialog').fadeOut(300);
        };
      })(this));
      return Events.addEventListener(Environment.EVENTS.STEP, (function(_this) {
        return function() {
          _this.countRatsInAreas();
          if (_this.env.date % 37 === 1) {
            drawCharts();
          }
          if (_this.stopDate > 0 && _this.env.date > _this.stopDate) {
            _this.env.stop();
            drawCharts();
            return _this._timesUp();
          }
        };
      })(this));
    },
    agentsOfSpecies: function(species) {
      var a, j, len, ref, set;
      set = [];
      ref = this.env.agents;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        if (a.species === species) {
          set.push(a);
        }
      }
      return set;
    },
    countRatsInAreas: function() {
      var a;
      if (this.isFieldModel) {
        return this.count_all = ((function() {
          var j, len, ref, results;
          ref = this.env.agentsWithin({
            x: 0,
            y: 0,
            width: 600,
            height: 700
          });
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            a = ref[j];
            if (a.species === sandratSpecies) {
              results.push(a);
            }
          }
          return results;
        }).call(this)).length;
      } else {
        this.count_s = ((function() {
          var j, len, ref, results;
          ref = this.env.agentsWithin({
            x: 0,
            y: 350,
            width: 1000,
            height: 350
          });
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            a = ref[j];
            if (a.species === sandratSpecies) {
              results.push(a);
            }
          }
          return results;
        }).call(this)).length;
        this.count_nw = ((function() {
          var j, len, ref, results;
          ref = this.env.agentsWithin({
            x: 0,
            y: 0,
            width: 500,
            height: 350
          });
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            a = ref[j];
            if (a.species === sandratSpecies) {
              results.push(a);
            }
          }
          return results;
        }).call(this)).length;
        return this.count_ne = ((function() {
          var j, len, ref, results;
          ref = this.env.agentsWithin({
            x: 500,
            y: 0,
            width: 500,
            height: 350
          });
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            a = ref[j];
            if (a.species === sandratSpecies) {
              results.push(a);
            }
          }
          return results;
        }).call(this)).length;
      }
    },
    countRats: function(rectangle) {
      var a, data, j, len, rats, weight;
      data = {};
      rats = (function() {
        var j, len, ref, results;
        ref = this.env.agentsWithin(rectangle);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          a = ref[j];
          if (a.species === sandratSpecies) {
            results.push(a);
          }
        }
        return results;
      }).call(this);
      data = {
        date: this.env.date,
        total: rats.length,
        healthy: 0,
        diabetic: 0,
        140: 0
      };
      for (j = 0, len = rats.length; j < len; j++) {
        a = rats[j];
        if (!a.get('has diabetes')) {
          data.healthy++;
        }
        if (a.get('has diabetes')) {
          data.diabetic++;
        }
        weight = Math.floor(a.get('weight') / 10) * 10;
        if (data[weight] == null) {
          data[weight] = 0;
        }
        data[weight]++;
      }
      return data;
    },
    setupEnvironment: function() {
      var col, i, j, k, l, ref, row;
      for (col = j = 0; j <= 60; col = ++j) {
        for (row = k = 0; k <= 70; row = ++k) {
          this.env.set(col, row, "chow", false);
        }
      }
      for (i = l = 0, ref = startingRats; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        this.addRat();
      }
      $('#chow, #chow-s, #chow-nw, #chow-ne').attr('checked', false);
      this.count_all = 0;
      this.count_s = 0;
      this.count_nw = 0;
      this.count_ne = 0;
      return resetAndDrawCharts();
    },
    addRat: function() {
      var rat, top;
      top = this.isFieldModel ? 0 : 350;
      rat = sandratSpecies.createAgent();
      rat.set('age', 20 + (Math.floor(Math.random() * 40)));
      rat.setLocation(env.randomLocationWithin(0, top, 600, 700, true));
      return this.env.addAgent(rat);
    },
    addChow: function(n, x, y, w, h) {
      var chow, i, j, ref, results;
      results = [];
      for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        chow = chowSpecies.createAgent();
        chow.setLocation(env.randomLocationWithin(x, y, w, h, true));
        results.push(this.env.addAgent(chow));
      }
      return results;
    },
    removeChow: function(x, y, width, height) {
      var agent, agents, j, len;
      agents = env.agentsWithin({
        x: x,
        y: y,
        width: width,
        height: height
      });
      for (j = 0, len = agents.length; j < len; j++) {
        agent = agents[j];
        if (agent.species.speciesName === "chow") {
          agent.die();
        }
      }
      return this.env.removeDeadAgents();
    },
    setNWChow: function(chow) {
      var col, j, k, row;
      for (col = j = 0; j <= 30; col = ++j) {
        for (row = k = 0; k <= 33; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(25, 0, 0, 500, 350);
      } else {
        return this.removeChow(0, 0, 500, 350);
      }
    },
    setNEChow: function(chow) {
      var col, j, k, row;
      for (col = j = 30; j <= 60; col = ++j) {
        for (row = k = 0; k <= 33; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(25, 500, 0, 500, 350);
      } else {
        return this.removeChow(500, 0, 500, 350);
      }
    },
    setSChow: function(chow) {
      var col, j, k, row;
      for (col = j = 0; j <= 60; col = ++j) {
        for (row = k = 36; k <= 75; row = ++k) {
          this.env.set(col, row, "chow", chow);
        }
      }
      if (chow) {
        return this.addChow(70, 0, 350, 1000, 350);
      } else {
        return this.removeChow(0, 350, 1000, 350);
      }
    },
    setStopDate: function(date) {
      return this.stopDate = date;
    },
    _timesUp: function() {
      return $('.time-limit-dialog').fadeIn(300);
    }
  };

  $(function() {
    var chart1, chart2;
    chart1 = null;
    chart2 = null;
    model.isFieldModel = !/[^\/]*html/.exec(document.location.href) || /[^\/]*html/.exec(document.location.href)[0] === "field.html";
    model.isLifespanModel = /[^\/]*html/.exec(document.location.href) && /[^\/]*html/.exec(document.location.href)[0] === "lifespan.html";
    if (!model.isFieldModel) {
      window.graph1Location = "s";
    }
    if (model.isLifespanModel) {
      startingRats = 10;
    }
    helpers.preload([model, env, sandratSpecies], function() {
      model.run();
      if ($('#field-chart').length > 0) {
        chart1 = new Chart(model, 'field-chart', 'diabetic', 'all');
      }
      if ($('#field-chart-2').length > 0) {
        return chart2 = new Chart(model, 'field-chart-2', 'diabetic', 'nw');
      }
    });
    $('#view-sex-check').change(function() {
      return model.showSex = $(this).is(':checked');
    });
    $('#view-prone-check').change(function() {
      return model.showPropensity = $(this).is(':checked');
    });
    $('#view-diabetic-check').change(function() {
      return model.showDiabetic = $(this).is(':checked');
    });
    $('#chow').change(function() {
      model.setNWChow($(this).is(':checked'));
      model.setNEChow($(this).is(':checked'));
      return model.setSChow($(this).is(':checked'));
    });
    $('#chow-nw').change(function() {
      return model.setNWChow($(this).is(':checked'));
    });
    $('#chow-ne').change(function() {
      return model.setNEChow($(this).is(':checked'));
    });
    $('#chow-s').change(function() {
      return model.setSChow($(this).is(':checked'));
    });
    $('#time-limit').change(function() {
      return model.setStopDate($(this).val() * (1000 / model.env._runLoopDelay));
    });
    window.resetAndDrawCharts = function() {
      if (chart1 != null) {
        chart1.reset();
      }
      if (chart2 != null) {
        chart2.reset();
      }
      return drawCharts();
    };
    return window.drawCharts = function() {
      if (chart1 != null) {
        chart1.draw();
      }
      return chart2 != null ? chart2.draw() : void 0;
    };
  });

}).call(this);
