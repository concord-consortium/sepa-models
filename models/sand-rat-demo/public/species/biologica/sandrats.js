// Generated by CoffeeScript 1.9.1
(function() {
  var hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require.register("species/biologica/sandrats", function(exports, require, module) {
    var genes;
    BioLogica.Genetics.prototype.getRandomAllele = function(exampleOfGene) {
      var _allelesOfGene, _weightsOfGene, allelesOfGene, curMax, gene, i, j, len, rand, ref, totWeights, weight;
      ref = this.species.geneList;
      for (gene in ref) {
        if (!hasProp.call(ref, gene)) continue;
        _allelesOfGene = this.species.geneList[gene].alleles;
        _weightsOfGene = this.species.geneList[gene].weights || [];
        if (indexOf.call(_allelesOfGene, exampleOfGene) >= 0) {
          allelesOfGene = _allelesOfGene;
          break;
        }
      }
      if (_weightsOfGene.length) {
        while (_weightsOfGene.length < allelesOfGene.length) {
          _weightsOfGene[_weightsOfGene.length] = 0;
        }
      } else {
        while (_weightsOfGene.length < allelesOfGene.length) {
          _weightsOfGene[_weightsOfGene.length] = 1;
        }
      }
      totWeights = _weightsOfGene.reduce((function(prev, cur) {
        return prev + cur;
      }), 0);
      rand = Math.random() * totWeights;
      curMax = 0;
      for (i = j = 0, len = _weightsOfGene.length; j < len; i = ++j) {
        weight = _weightsOfGene[i];
        curMax += weight;
        if (rand <= curMax) {
          return allelesOfGene[i];
        }
      }
      if (console.error != null) {
        console.error('somehow did not pick one: ' + allelesOfGene[0]);
      }
      return allelesOfGene[0];
    };
    genes = [
      {
        dominant: 'DR',
        recessive: 'drb'
      }, {
        dominant: 'DR',
        recessive: 'drb'
      }, {
        dominant: 'DY',
        recessive: 'dyb'
      }, {
        dominant: 'DY',
        recessive: 'dyb'
      }, {
        dominant: 'DB',
        recessive: 'dbb'
      }, {
        dominant: 'DB',
        recessive: 'dbb'
      }
    ];
    return module.exports = {
      name: 'Sandrats',
      chromosomeNames: ['1', '2', 'XY'],
      chromosomeGeneMap: {
        '1': ['DR'],
        '2': ['DY', 'DB'],
        'XY': []
      },
      chromosomesLength: {
        '1': 100000000,
        '2': 100000000,
        'XY': 70000000
      },
      geneList: {
        'red': {
          alleles: ['DR', 'drb'],
          weights: [0.2, 0.8],
          start: 10000000,
          length: 10584
        },
        'yellow': {
          alleles: ['DY', 'dyb'],
          weights: [0.2, 0.8],
          start: 10000000,
          length: 8882
        },
        'blue': {
          alleles: ['DB', 'dbb'],
          weights: [0.2, 0.8],
          start: 600000000,
          length: 5563
        }
      },
      alleleLabelMap: {
        'DR': 'Red',
        'DY': 'Yellow',
        'DB': 'Blue',
        'drb': 'Black',
        'dyb': 'Black',
        'dbb': 'Black',
        'Y': 'Y',
        '': ''
      },
      traitRules: {
        'red diabetes': {
          'none': [['drb', 'drb']],
          'level1': [['DR', 'drb']],
          'level2': [['DR', 'DR']]
        },
        'yellow diabetes': {
          'none': [['dyb', 'dyb']],
          'level1': [['DY', 'dyb']],
          'level2': [['DY', 'DY']]
        },
        'blue diabetes': {
          'none': [['dbb', 'dbb']],
          'level1': [['DB', 'dbb']],
          'level2': [['DB', 'DB']]
        }
      },

      /*
        Images are handled via the populations.js species
       */
      getImageName: function(org) {
        return void 0;
      },

      /*
        no lethal characteristics
       */
      makeAlive: function(org) {
        return void 0;
      }
    };
  });

}).call(this);
